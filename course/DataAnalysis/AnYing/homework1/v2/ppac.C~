#define ppac_cxx
#include "ppac.h"
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>

void ppac::Loop()
{
//   In a ROOT session, you can do:
//      root> .L ppac.C
//      root> ppac t
//      root> t.GetEntry(12); // Fill t data members with entry number 12
//      root> t.Show();       // Show values of entry 12
//      root> t.Show(16);     // Read and show values of entry 16
//      root> t.Loop();       // Loop on all entries
//

//     This is the loop skeleton where:
//    jentry is the global entry number in the chain
//    ientry is the entry number in the current Tree
//  Note that the argument to GetEntry must be:
//    jentry for TChain::GetEntry
//    ientry for TTree::GetEntry and TBranch::GetEntry
//
//       To read only selected branches, Insert statements like:
// METHOD1:
//    fChain->SetBranchStatus("*",0);  // disable all branches
//    fChain->SetBranchStatus("branchname",1);  // activate branchname
// METHOD2: replace line
//    fChain->GetEntry(jentry);       //read all branches
//by  b_branchname->GetEntry(ientry); //read only this branch
   if (fChain == 0) return;

   Long64_t nentries = fChain->GetEntriesFast();
   std::cout<<nentries<<std::endl;
   // nentries=20000;

   fChain->SetBranchStatus("*",0);
   fChain->SetBranchStatus("PPACF8",1);
   TFile *f=new TFile("test.root","RECREATE");
   TTree *tr1=new TTree("tr1","tr1");
   tr1->Branch("targetX",&targetX,"targetX/F");  
   tr1->Branch("targetY",&targetY,"targetY/F");
   Long64_t nbytes = 0, nb = 0;
   for (Long64_t jentry=0; jentry<nentries;jentry++) {
      Long64_t ientry = LoadTree(jentry);
      if (ientry < 0) break;
      nb = fChain->GetEntry(jentry);   nbytes += nb;
      // if (Cut(ientry) < 0) continue;
      if(jentry%1000==0) std::cout<<jentry<<std::endl;
      ResetVal();
      select();
//      fit();
      tr1->Fill();
   }
 tr1->Write();
 f->Close(); 
}
//void ppac::BranchOpt(TTree *opt)
//{
//  opt->Branch("targetX",&targetX,"targetX/F");
//  opt->Branch("targetY",&targetY,"targetY/F");
//}

void ppac::select()
{
  Int_t p=0;
  TGraph *gx = new TGraph();
  TGraph *gy = new TGraph();
  TF1 *fx= new TF1("fx","[0]*x+[1]",-2000,0);
  TF1 *fy= new TF1("fy","[0]*x+[1]",-2000,0);
    for(Int_t i=0;i<5;i++){
        Ta = PPACF8[i][4]>0;
        condition[i]= abs(PPACF8[i][0])<=120 && abs(PPACF8[i][1])<=75;
        condition[i] =condition[i]*Ta;
        Good[i]=false;

        if(condition[i]) Good[i]=true;//只有当点满足每层ppac上的X、Y坐标范围的时候，此点为好的点为真。 
       } 
//排除的事件情况为：1.符合条件的两个点在一块ppac上，
//2.只有一个点符合条件
//3.没有点符合条件
 bool case1=(condition[0]   ||  condition[1])  &&  (!condition[2]) && (!condition[3]) && (!condition[4]);//两个符合条件的点都在第一个ppac上，或者只有一个符合条件的点，在第一个ppac上
 bool case2=(condition[2]   ||  condition[3])  &&  (!condition[0]) && (!condition[1]) && (!condition[4]);//两个符合条件的点都在第二个ppac上，或者只有一个符合条件点，在第二个ppac上
 bool case3=(condition[4]   || !condition[4])  &&  (!condition[0]) && (!condition[1]) && (!condition[2]) && (!condition[3]);//只有一个符合条件的点，在第三个ppac上；没有符合条件的点
 for(Int_t k=0;k<5;k++){
   if( !(case1 && case2 && case3) ){
        x[k]  = PPACF8[k][0];  
        zx[k] = PPACF8[k][2];  
        y[k]  = PPACF8[k][1];  
        zy[k] = PPACF8[k][3];  
       }
    if( Good[k]==true  ){
      
      gx->SetPoint(p,zx[k],x[k]);//两个坐标反了
      gy->SetPoint(p,zy[k],y[k]);//两个坐标反了
       p=p+1;
       }
    } 
 gx->Fit("fx","q");
 gy->Fit("fy","q");
      Float_t ax=fx->GetParameter(0);
      Float_t bx=fx->GetParameter(1);
      Float_t ay=fy->GetParameter(0);
      Float_t by=fy->GetParameter(1);
      Float_t ZZ=0;
      targetX=ax*ZZ+bx;//公式这样写意味着拟合时候横坐标是z
      targetY=ay*ZZ+by;
      // std::cout<<"target X = "<<targetX<<endl;
      // std::cout<<"target Y = "<<targetY<<endl;
      
   
}
void ppac::ResetVal()
{
for(Int_t i=0;i<5;i++){
   x[i]  = -999; 
   zx[i] = -999; 
   y[i]  = -999; 
   zy[i] = -999; 
  }
}


//void ppac::fit()
//{
// TGraph *gx = new TGraph();  
// TGraph *gy = new TGraph();  
// TF1 *fx= new TF1("fx","[0]*x+[1]",-2000,2000);
// TF1 *fy= new TF1("fy","[0]*x+[1]",-2000,2000); 
//    if( Good[i]==true  ){
//      gx->SetPoint(i,x[i],zx[i]);//不是好的点，不记录
//      gy->SetPoint(i,y[i],zy[i]);
//     }
// gx->Fit("fx");
// gy->Fit("fy");
// Float_t ax=fx->GetParameter(0);
// Float_t bx=fx->GetParameter(1);
// Float_t ay=fy->GetParameter(0);
// Float_t by=fy->GetParameter(1);
// Float_t ZZ=0;
// targetX=ax*ZZ+bx;
// targetY=ay*ZZ+by;
// std::cout<<"target X = "<<targetX<<endl; 
// std::cout<<"target Y = "<<targetY<<endl; 
//}
